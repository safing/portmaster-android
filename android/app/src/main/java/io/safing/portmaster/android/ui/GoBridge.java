package io.safing.portmaster.android.ui;

// DO NOT EDIT THIS FILE!
// The file was autogenerated by go/codegen/gen.go

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

import org.json.JSONException;

@CapacitorPlugin(name = "GoBridge")
public class GoBridge extends Plugin {

    @PluginMethod()
    public void EnableSPN(PluginCall call) {
        ui.Ui.enableSPN(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void DisableSPN(PluginCall call) {
        ui.Ui.disableSPN(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void EnableTunnel(PluginCall call) {
        ui.Ui.enableTunnel(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void DisableTunnel(PluginCall call) {
        ui.Ui.disableTunnel(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void RestartTunnel(PluginCall call) {
        ui.Ui.restartTunnel(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void GetTunnelStatus(PluginCall call) {
        ui.Ui.getTunnelStatus(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void GetUser(PluginCall call) {
        ui.Ui.getUser(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void Login(PluginCall call) {
        ui.Ui.login(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void Logout(PluginCall call) {
        ui.Ui.logout(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void UpdateUserInfo(PluginCall call) {
        ui.Ui.updateUserInfo(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void GetSPNStatus(PluginCall call) {
        ui.Ui.getSPNStatus(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void GetLogs(PluginCall call) {
        ui.Ui.getLogs(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void GetDebugInfoFile(PluginCall call) {
        ui.Ui.getDebugInfoFile(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void GetDebugInfo(PluginCall call) {
        ui.Ui.getDebugInfo(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void DatabaseSubscribe(PluginCall call) {
        ui.Ui.databaseSubscribe(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void CancelAllSubscriptions(PluginCall call) {
        ui.Ui.cancelAllSubscriptions(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void RemoveSubscription(PluginCall call) {
        ui.Ui.removeSubscription(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void CreateIssue(PluginCall call) {
        ui.Ui.createIssue(new GoPluginCall(this, call));
    }

    @PluginMethod()
    public void CreateTicket(PluginCall call) {
        ui.Ui.createTicket(new GoPluginCall(this, call));
    }

    public void notifyListener(String name, String data) throws JSONException {
	    notifyListeners(name, new JSObject(data));
    }
}
