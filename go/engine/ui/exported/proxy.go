package exported 
import (
	"fmt"
	"encoding/json"

	"github.com/safing/portbase/log"
	"github.com/safing/portmaster-android/go/engine"
	"github.com/safing/portmaster-android/go/engine/ui"
)


// DO NOT EDIT THIS FILE!
// The file was autogenerated by go/codegenv2/gen.go

func EnableSPN(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function EnableSPN panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.EnableSPN()
	
	
	// Resolve the call
	call.Resolve()
}

func DisableSPN(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function DisableSPN panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.DisableSPN()
	
	
	// Resolve the call
	call.Resolve()
}

func IsTunnelActive(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function IsTunnelActive panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ret0 := ui.IsTunnelActive()
	
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": %t}`, ret0))
}

func EnableTunnel(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function EnableTunnel panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.EnableTunnel()
	
	
	// Resolve the call
	call.Resolve()
}

func RestartTunnel(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function RestartTunnel panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.RestartTunnel()
	
	
	// Resolve the call
	call.Resolve()
}

func GetUser(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function GetUser panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ret0, err1 := ui.GetUser()
	
	if err1 != nil {
		call.Error(err1.Error())
		return
	}
	
	ret0Json, _ := json.Marshal(ret0)
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": %s}`, ret0Json))
}

func Login(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function Login panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	ui.Login(call)
}

func Logout(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function Logout panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	err0 := ui.Logout()
	
	if err0 != nil {
		call.Error(err0.Error())
		return
	}
	
	
	// Resolve the call
	call.Resolve()
}

func UpdateUserInfo(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function UpdateUserInfo panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ret0, err1 := ui.UpdateUserInfo()
	
	if err1 != nil {
		call.Error(err1.Error())
		return
	}
	
	ret0Json, _ := json.Marshal(ret0)
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": %s}`, ret0Json))
}

func GetSPNStatus(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function GetSPNStatus panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ret0 := ui.GetSPNStatus()
	
	ret0Json, _ := json.Marshal(ret0)
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": %s}`, ret0Json))
}

func GetLogs(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function GetLogs panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Parameter ID
	ID, err := call.GetLong("ID")
	if err != nil {
		call.Error("missing ID argument")
		return
	}
	// Function call
	ret0 := ui.GetLogs(ID)
	
	ret0Json, _ := json.Marshal(ret0)
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": %s}`, ret0Json))
}

func GetDebugInfoFile(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function GetDebugInfoFile panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.GetDebugInfoFile()
	
	
	// Resolve the call
	call.Resolve()
}

func GetDebugInfo(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function GetDebugInfo panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ret0, err1 := ui.GetDebugInfo()
	
	if err1 != nil {
		call.Error(err1.Error())
		return
	}
	
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": "%s"}`, ret0))
}

func DatabaseSubscribe(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function DatabaseSubscribe panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	ui.DatabaseSubscribe(call)
}

func CancelAllSubscriptions(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function CancelAllSubscriptions panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.CancelAllSubscriptions()
	
	
	// Resolve the call
	call.Resolve()
}

func RemoveSubscription(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function RemoveSubscription panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Parameter eventID
	eventID, err := call.GetString("eventID")
	if err != nil {
		call.Error("missing eventID argument")
		return
	}
	// Function call
	ui.RemoveSubscription(eventID)
	
	
	// Resolve the call
	call.Resolve()
}

func Shutdown(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function Shutdown panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Function call
	ui.Shutdown()
	
	
	// Resolve the call
	call.Resolve()
}

func CreateIssue(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function CreateIssue panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Parameter debugInfo
	debugInfo, err := call.GetString("debugInfo")
	if err != nil {
		call.Error("missing debugInfo argument")
		return
	}
	// Parameter genUrl
	genUrl, err := call.GetBool("genUrl")
	if err != nil {
		call.Error("missing genUrl argument")
		return
	}
	// Parameter issueRequestStr
	issueRequestStr, err := call.GetString("issueRequestStr")
	if err != nil {
		call.Error("missing issueRequestStr argument")
		return
	}
	// Function call
	ret0, err1 := ui.CreateIssue(debugInfo, genUrl, issueRequestStr)
	
	if err1 != nil {
		call.Error(err1.Error())
		return
	}
	
	
	// Resolve the call
	call.ResolveJson(fmt.Sprintf(`{"ret0": "%s"}`, ret0))
}

func CreateTicket(call engine.PluginCall) {
	// set up recovery
	defer func() {
		// recover from panic
		panicVal := recover()
		if panicVal != nil {
			log.Errorf("ui: function CreateTicket panicked: %s", panicVal)
			if call != nil {
				call.Error(fmt.Sprintf("function panicked: %s", panicVal))
			}
		}
	}()

	// Parameter debugInfo
	debugInfo, err := call.GetString("debugInfo")
	if err != nil {
		call.Error("missing debugInfo argument")
		return
	}
	// Parameter ticketRequestStr
	ticketRequestStr, err := call.GetString("ticketRequestStr")
	if err != nil {
		call.Error("missing ticketRequestStr argument")
		return
	}
	// Function call
	err0 := ui.CreateTicket(debugInfo, ticketRequestStr)
	
	if err0 != nil {
		call.Error(err0.Error())
		return
	}
	
	
	// Resolve the call
	call.Resolve()
}


