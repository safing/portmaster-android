package main

import (
	"bytes"
	"fmt"
	"os"
	"strings"
	"text/template"
)

const javaFileTemplate = `package io.safing.portmaster.android.ui;

// DO NOT EDIT THIS FILE!
// The file was autogenerated by go/codegen/gen.go

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

import org.json.JSONException;

@CapacitorPlugin(name = "GoBridge")
public class GoBridge extends Plugin {
%s
	public void notifyListener(String name, String data) throws JSONException {
		notifyListeners(name, new JSObject(data));
	}
}
`

const javaMethodTemplate = `
	@PluginMethod()
	public void {{.Name}}(PluginCall call) {
		exported.Exported.{{firstLowerCase .Name}}(new GoPluginCall(this, call));
	}
`

func firstLetterLowercase(name string) string {
	name = strings.ToLower(name[0:1]) + name[1:]
	return name
}

func writeToJavaFile(filename string, functions []Func) {
	javaFile, err := os.Create(filename)
	if err != nil {
		fmt.Printf("Failed to create file: %s", err)
		return
	}
	defer javaFile.Close()

	javaTmpl := template.New("JavaFunctionTemplate")
	javaTmpl.Funcs(template.FuncMap{
		"firstLowerCase": firstLetterLowercase,
	})
	_, err = javaTmpl.Parse(javaMethodTemplate)
	if err != nil {
		fmt.Printf("Failed to parse template: %s", err)
		return
	}

	buf := new(bytes.Buffer)

	for _, r := range functions {
		javaTmpl.Execute(buf, r)
	}

	_, err = javaFile.WriteString(fmt.Sprintf(javaFileTemplate, buf.String()))
	if err != nil {
		fmt.Printf("Failed to write to file: %s", err)
		return
	}

}
